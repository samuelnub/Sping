1 - 18 Sep 2016:
	ey, bgfx is just giving me the biggest headache of all time, so I think I'm gonna stick with pure OGL (just hope khronos doesnt abandon it for vk)
	just main.cpp for now. uh, trying a different file structure, everything is PascalCase, and I'm gonna make the edgy move of putting .cpp and .h files in the same place
	I'll need to implement a thread pool if I want to do generation and rendering and all that juicy stuff in one frame
	wrap all your shiz in a namespace

2 - 19 Sep 2016:
	took a threadpool implementation from https://github.com/progschj/ThreadPool
	see its example.cpp, use lambdas
	use it for time-costly stuff like file io or mesh generation dispatch etc...
	try making a separate input class and event "dispatch" class (try actually implementing the actual observer pattern this time)

3 - 20 Sep 2016:
	basic windower up, working!
	next time you should check if classes can be usable or if theyre still being modified by the threadpool
	linker, add SDL2.lib AND SDL2main.lib, just need SDL2.dll in your working dir.

4 - 21 Sep 2016:
	might want to look into RapidXML, header only, and its performance looks pretty impressive compared to tinyxml

5 - 27 Sep 2016:
	added tinyxml2 dependancy, and glew32s.lib & opengl32.lib
	initializing may be handled single threadedly, but then in loop, you could use extra threads

6 - 28 Sep 2016:
	generally sorted out window and settings, to the degree that i currently need it. try and stick to that, dont try to facilitate everything on your first run, add stuff when you need it, i mean, that's what TODO's are partly for
	if you wanna do a "layered rendering" method again, try doing it close-to-far, and use the stencil buffer to block out already-rendered pixels

7 - 29 Sep 2016:
	starting on the renderer portion, will contain managers for shaders, meshes and textures, as well as a proper scene graph and nodes
	by the way, ogl doesn't provide "#include <>" capabilities in glsl, but their ARB_shading_language_include extension should do the trick