1 - 18 Sep 2016:
	ey, bgfx is just giving me the biggest headache of all time, so I think I'm gonna stick with pure OGL (just hope khronos doesnt abandon it for vk)
	just main.cpp for now. uh, trying a different file structure, everything is PascalCase, and I'm gonna make the edgy move of putting .cpp and .h files in the same place
	I'll need to implement a thread pool if I want to do generation and rendering and all that juicy stuff in one frame
	wrap all your shiz in a namespace

2 - 19 Sep 2016:
	took a threadpool implementation from https://github.com/progschj/ThreadPool
	see its example.cpp, use lambdas
	use it for time-costly stuff like file io or mesh generation dispatch etc...
	try making a separate input class and event "dispatch" class (try actually implementing the actual observer pattern this time)

3 - 20 Sep 2016:
	basic windower up, working!
	next time you should check if classes can be usable or if theyre still being modified by the threadpool
	linker, add SDL2.lib AND SDL2main.lib, just need SDL2.dll in your working dir.

4 - 21 Sep 2016:
	might want to look into RapidXML, header only, and its performance looks pretty impressive compared to tinyxml

5 - 27 Sep 2016:
	added tinyxml2 dependancy, and glew32s.lib & opengl32.lib
	initializing may be handled single threadedly, but then in loop, you could use extra threads

6 - 28 Sep 2016:
	generally sorted out window and settings, to the degree that i currently need it. try and stick to that, dont try to facilitate everything on your first run, add stuff when you need it, i mean, that's what TODO's are partly for
	if you wanna do a "layered rendering" method again, try doing it close-to-far, and use the stencil buffer to block out already-rendered pixels

7 - 29 Sep 2016:
	starting on the renderer portion, will contain managers for shaders, meshes and textures, as well as a proper scene graph and nodes
	by the way, ogl doesn't provide "#include <>" capabilities in glsl, but their ARB_shading_language_include extension should do the trick

8 - 30 Sep 2016:
	finished up meshes manager, won't know if it fully works till i finish the other managers, and make a quick scene and renderer implementation
	oh snap, c++14 allows you to specify a binary literal, eg 0b1101, heck yea

9 - 1 Oct 2016:
	october, o man
	the handler/file folder should ultimately only contain settings and savefile classes, other classes arent strictly stopped from conducting file io operations, that'd just be stupid

10 - 2 Oct 2016:
	oh SNAP, just got bgfx to build properly, just did make using the VS command prompt in my documents/git one (not mingw or that shiz via cmd), right now theres just an error @ runtime for their example program, regarding VR, probably just need to get the oculus sdk and specify the PATH as the docs said
	(sorry im getting sidetracked)
	flucking works, just set it @ line 119 of hmd.cpp, whereby it checks if a var is a nullptr, and will return, made it so it returns if its not nullptr, cause the var itself is some hex value beforehand, making it carry out subsequent actions which will cause segfaults
	actually, bgfx is still an ass to get working :(, theres a bunch of libs to sort out and linker settings are just killing me, i'll just continue this until something solves itself

11 - 4 Oct 2016:
	read up on shader storage buffer objects, really cool for keeping craptons of data on the graphics card, compared to uniform buffer objects, ogl 4.3+ feature (which means screw you osx lol)
	try to minify the mesh and shader's instance classes, mimic the texture class' factory method
	by the way, just realised that deleting your objects from the map will leave nothing for gl to clean up in the destructor, TODO: make it attempt to glDelete when you call the "remove()"
	possibly use SSBO's instead of VBO's for vertex passing and management, check out http://stackoverflow.com/questions/25055580/bind-an-ssbo-to-a-fragment-shader
	oh yea, and stb dependancy now too, for stb_image.h

12 - 5 Oct 2016:
	